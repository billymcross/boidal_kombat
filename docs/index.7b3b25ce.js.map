{"mappings":"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","sources":["simulation.frag.glsl","simulation.vert.glsl","render.frag.glsl","render.vert.glsl","main.js"],"sourcesContent":["#version 300 es\r\nprecision mediump float;\r\n\r\nin  vec4 agent_out;\r\nout vec4 frag;\r\n\r\nvoid main() {\r\n  frag = agent_out;\r\n}","#version 300 es\r\nprecision mediump float;\r\n\r\n// last reported agent (vertex) position/velocity\r\nin vec4 agent_in;\r\n\r\n// texture containing position/velocity of all agents\r\nuniform sampler2D flock;\r\n// total size of flock\r\nuniform float agentCount;\r\n//resolution\r\nuniform vec2 resolution;\r\n//mouse coords\r\nuniform vec2 mouse;\r\n\r\n//thresholds, passed from params\r\nuniform float cohesionDist;\r\nuniform float separationDist;\r\nuniform float alignDist;\r\n\r\n//scales for different forces\r\nuniform float cohesionScale;\r\nuniform float separationScale;\r\nuniform float alignScale;\r\n\r\n//boolean to diffuse boids\r\nuniform bool diffuseBoids;\r\n\r\n//Main audio level\r\nuniform float audio;\r\n\r\n//Audio scales for each force\r\nuniform float cohesionAudio;\r\nuniform float separationAudio;\r\nuniform float alignAudio;\r\n\r\n\r\n// newly calculated position / velocity of agent\r\nout vec4 agent_out;\r\n\r\nvec2 cohesion = vec2(0., 0.);\r\nvec2 separation = vec2(0., 0.);\r\nvec2 align = vec2(0., 0.);\r\n\r\nvec2 acceleration = vec2(0., 0.);\r\nfloat maxSpeed = .03;\r\nfloat maxForce = .001;\r\n\r\nfloat random(vec2 coeff) {\r\n  return fract(sin(dot(coeff, vec2(12.9898, 78.233))) * 43758.5453);\r\n}\r\n\r\nvoid main() {\r\n  // the position of this vertex needs to be reported\r\n  // in the range {-1,1}. We can use the gl_VertexID\r\n  // input variable to determine the current vertex's\r\n  // position in the array and convert it to the desired range.\r\n  float idx = -1. + (float( gl_VertexID ) / agentCount) * 2.;\r\n\r\n  // we'll use agent_out to send the agent position and velocity\r\n  // to the fragment shader, which will render it to our 1D texture.\r\n  // agent_out is also the target of our transform feedback.\r\n  agent_out = agent_in;\r\n\r\n  if (!diffuseBoids) {\r\n    // loop through all agents...\r\n    for( int i = 0; i < int( agentCount ); i++ ) {\r\n      // make sure the index isn't the index of our current agent\r\n      if( i == gl_VertexID ) continue;\r\n\r\n      // get our agent for comparison. texelFetch accepts an integer\r\n      // vector measured in pixels to determine the location of the\r\n      // texture lookup.\r\n      vec4 agent  = texelFetch( flock, ivec2(i,0), 0 );\r\n\r\n      float dist = distance(agent_out.xy, agent.xy);\r\n\r\n      if (dist < cohesionDist) {\r\n        cohesion += agent.xy;\r\n      }\r\n\r\n      if (dist < separationDist) {\r\n        vec2 diff = (agent_out.xy - agent.xy);\r\n        separation += diff;\r\n      }\r\n\r\n      if (dist < alignDist) {\r\n        align += agent.zw;\r\n      }\r\n    }\r\n\r\n    cohesion = cohesion;\r\n    cohesion -= agent_out.zw;\r\n    if (length(cohesion) > maxForce) {\r\n      cohesion = normalize(cohesion) * maxForce;\r\n    }\r\n    cohesion *= -1.;\r\n    cohesion *= cohesionScale;\r\n    float cohesionTotalAudio;\r\n    if (cohesionAudio > 0.) cohesionTotalAudio = audio * cohesionAudio;\r\n    else cohesionTotalAudio = audio;\r\n    cohesion *= cohesionTotalAudio;\r\n\r\n    separation = separation;\r\n    separation -= agent_out.zw;\r\n    if (length(separation) > maxForce) {\r\n      separation = normalize(separation) * maxForce;\r\n    }\r\n    separation *= separationScale;\r\n    float separationTotalAudio;\r\n    if (separationAudio > 0.) separationTotalAudio = audio * separationAudio;\r\n    else separationTotalAudio = audio;\r\n    separation *= separationTotalAudio;\r\n\r\n    align -= agent_out.zw;\r\n    if (length(align) > maxForce) {\r\n      align = normalize(align) * maxForce;\r\n    }\r\n    align *= alignScale;\r\n    float alignTotalAudio;\r\n    if (alignAudio > 0.) alignTotalAudio = audio * alignAudio;\r\n    else alignTotalAudio = audio;\r\n    align *= alignTotalAudio;\r\n\r\n    acceleration += cohesion + separation + align;\r\n    agent_out.zw += acceleration;\r\n  }\r\n\r\n  else {\r\n    agent_out.x = (-1. + (random(agent_out.xy)*2.));\r\n    agent_out.y = (-1. + (random(agent_out.xy)*2.));\r\n\r\n  }\r\n\r\n  if (length(agent_out.zw) > (maxSpeed)) {\r\n    agent_out.zw = normalize(agent_out.zw);\r\n    agent_out.zw *= (maxSpeed);\r\n  }\r\n\r\n  agent_out.x = agent_out.x + agent_out.z;\r\n  agent_out.y = agent_out.y + agent_out.w;\r\n\r\n  if (agent_out.x > 1.) agent_out.x = -1.;\r\n  if (agent_out.x < -1.) agent_out.x = 1.;\r\n  if (agent_out.y > 1.) agent_out.y = -1.;\r\n  if (agent_out.y < -1.) agent_out.y = 1.;\r\n\r\n  // each agent is one pixel. remember, this shader is not used for\r\n  // rendering to the screen, only to our 1D texture array.\r\n  gl_PointSize = 1.;\r\n\r\n  // report our index as the x member of gl_Position. y is always 0.\r\n  gl_Position = vec4( idx, .0, 0., 1. );\r\n}","#version 300 es\r\n#ifdef GL_ES\r\nprecision mediump float;\r\n#endif\r\n\r\nin vec4 agent_out;\r\n\r\nuniform float time;\r\n\r\nout vec4 color;\r\nvoid main() {\r\n\r\n  color = vec4( abs(agent_out.z / 0.01), 0. , abs(agent_out.w / 0.1), 1. );\r\n}","#version 300 es\r\nin vec4 agent;\r\n\r\nout vec4 agent_out;\r\n\r\nuniform float audio;\r\n\r\nvoid main() {\r\n  gl_PointSize = 2.;\r\n  gl_Position = vec4( agent.xy, 0., 1. );\r\n  agent_out = agent;\r\n}","import simulation_frag from './simulation.frag.glsl'\r\nimport simulation_vert from './simulation.vert.glsl'\r\nimport render_frag from './render.frag.glsl'\r\nimport render_vert from './render.vert.glsl'\r\n\r\n// \"global\" variables\r\nlet gl,\r\n    transformFeedback,\r\n    framebuffer,\r\n    simulationProgram, simulationPosition,\r\n    renderProgram,\r\n    buffers,\r\n    mouseX = 0.,\r\n    mouseY = 0.,\r\n    uMouse,\r\n    uTime,\r\n    uCohesion,\r\n    uSeparation,\r\n    uAlign,\r\n    uCohesionScale,\r\n    uSeparationScale,\r\n    uAlignScale,\r\n    uCohesionAudio,\r\n    uSeparationAudio,\r\n    uAlignAudio,\r\n    uDiffuse,\r\n    uAudio,\r\n    uAudioRender,\r\n    audioCtx,\r\n    analyser,\r\n    ctxReady\r\n\r\nconst textures = [],\r\n    agentCount = 16384\r\n\r\n\r\nconst PARAMS = {\r\n  cohesionDist: 0.4,\r\n  separationDist: 0.1,\r\n  alignDist: 0.05,\r\n  cohesionScale: 1.,\r\n  separationScale: 1.,\r\n  alignScale: 1.,\r\n};\r\n\r\nconst AUDIO = {\r\n  cohesionAudio: 1.,\r\n  separationAudio: 1.,\r\n  alignAudio: 1.\r\n}\r\n\r\nwindow.onload = function() {\r\n  const canvas = document.getElementById( 'gl' )\r\n  gl = canvas.getContext( 'webgl2' )\r\n  canvas.width  = window.innerWidth\r\n  canvas.height = window.innerHeight\r\n  \r\n  window.onmousemove = function(event) {\r\n    mouseX = -1. + (event.x / canvas.width) * 2.;\r\n    mouseY = -1. + (event.y / canvas.height) * 2.;\r\n    mouseY *= -1.;\r\n  }\r\n\r\n  ctxReady = false;\r\n\r\n  window.onkeydown = function () {\r\n    if (!ctxReady) {\r\n      // audio init\r\n      audioCtx = new AudioContext();\r\n      const audioElement = document.getElementById('audioElement')\r\n      const player = audioCtx.createMediaElementSource(audioElement)\r\n      player.connect(audioCtx.destination)\r\n\r\n      // audio graph setup\r\n      analyser = audioCtx.createAnalyser()\r\n      analyser.fftSize = 1024 // 512 bins\r\n      player.connect(analyser)\r\n      ctxReady = true;\r\n    }\r\n  }\r\n\r\n\r\n  const pane = new Tweakpane.Pane();\r\n\r\n  const tab = pane.addTab( {\r\n    pages: [\r\n      {title: 'Behavior'},\r\n      {title: 'Audio'}\r\n    ]\r\n  })\r\n\r\n  tab.pages[0].addInput(PARAMS, 'cohesionDist', {\r\n    min: 0.,\r\n    max: 0.5\r\n  });\r\n  tab.pages[0].addInput(PARAMS, 'separationDist', {\r\n    min: 0.,\r\n    max: 0.5\r\n  });\r\n  tab.pages[0].addInput(PARAMS, 'alignDist', {\r\n    min: 0.02,\r\n    max: 0.5\r\n  });\r\n  tab.pages[0].addInput(PARAMS, 'cohesionScale', {\r\n    min: 1.,\r\n    max: 30.\r\n  });\r\n  tab.pages[0].addInput(PARAMS, 'separationScale', {\r\n    min: 1.,\r\n    max: 30.\r\n  });\r\n  tab.pages[0].addInput(PARAMS, 'alignScale', {\r\n    min: 1.,\r\n    max: 30.\r\n  });\r\n\r\n  tab.pages[1].addInput(AUDIO, 'cohesionAudio', {\r\n    min: 0.,\r\n    max: 10.\r\n  })\r\n  tab.pages[1].addInput(AUDIO, 'separationAudio', {\r\n    min: 0.,\r\n    max: 10.\r\n  })\r\n  tab.pages[1].addInput(AUDIO, 'alignAudio', {\r\n    min: 0.,\r\n    max: 10.\r\n  })\r\n\r\n  makeSimulationPhase()\r\n  makeRenderPhase()\r\n  makeTextures()\r\n\r\n  framebuffer = gl.createFramebuffer()\r\n\r\n  render()\r\n}\r\n\r\nfunction makeProgram( vert, frag, transform=null ) {\r\n  let vertexShader = gl.createShader( gl.VERTEX_SHADER )\r\n  gl.shaderSource( vertexShader, vert )\r\n  gl.compileShader( vertexShader )\r\n  let err = gl.getShaderInfoLog( vertexShader )\r\n  if( err !== '' ) console.log( err )\r\n\r\n  const fragmentShader = gl.createShader( gl.FRAGMENT_SHADER )\r\n  gl.shaderSource( fragmentShader, frag )\r\n  gl.compileShader( fragmentShader )\r\n  err = gl.getShaderInfoLog( fragmentShader )\r\n  if( err !== '' ) console.log( err )\r\n\r\n  const program = gl.createProgram()\r\n  gl.attachShader( program, vertexShader )\r\n  gl.attachShader( program, fragmentShader )\r\n\r\n  // transform feedback must happen before shader is linked / used.\r\n  let trasformFeedback\r\n  if( transform !== null ) {\r\n    transformFeedback = gl.createTransformFeedback()\r\n    gl.bindTransformFeedback(gl.TRANSFORM_FEEDBACK, transformFeedback)\r\n    gl.transformFeedbackVaryings( program, transform, gl.SEPARATE_ATTRIBS )\r\n  }\r\n\r\n  gl.linkProgram( program )\r\n\r\n  // return an array containing shader program and transform feedback\r\n  // if feedback is enabled, otherwise just return shader program\r\n  return transform === null ? program : [ program, transformFeedback ]\r\n}\r\n\r\nfunction makeBuffers( array, count=1, usage=gl.STATIC_DRAW ) {\r\n  const buffer = gl.createBuffer()\r\n  gl.bindBuffer( gl.ARRAY_BUFFER, buffer )\r\n  gl.bufferData( gl.ARRAY_BUFFER, array, usage )\r\n\r\n  let buffers = null\r\n  if( count > 1) {\r\n    buffers = [ buffer ]\r\n    for( let i = 0; i < count; i++ ) {\r\n      const buff = gl.createBuffer()\r\n      gl.bindBuffer( gl.ARRAY_BUFFER, buff )\r\n      gl.bufferData( gl.ARRAY_BUFFER, array.byteLength, usage )\r\n\r\n      buffers.push( buff )\r\n    }\r\n  }\r\n\r\n  return Array.isArray( buffers ) ? buffers : buffer\r\n}\r\n\r\nfunction makeSimulationPhase(){\r\n  // pass in our vertex/fragment shader source code, and specify\r\n  // that the attribute agent_out should be fed into transform feedback\r\n  const shader = makeProgram( simulation_vert, simulation_frag, ['agent_out'])\r\n  simulationProgram = shader[0]\r\n  transformFeedback = shader[1]\r\n\r\n  gl.useProgram( simulationProgram )\r\n\r\n  buffers = makeSimulationBuffer()\r\n\r\n  makeSimulationUniforms()\r\n}\r\n\r\nfunction makeSimulationBuffer() {\r\n  const __agents = []\r\n  for( let i = 0; i <= agentCount * 4; i+=4 ) {\r\n    __agents[i] = -1 + Math.random() * 2\r\n    __agents[i+1] =  -1 +Math.random() * 2\r\n    __agents[i+2] = -2 + Math.random() * 10\r\n    __agents[i+3] = -2 + Math.random() * 10\r\n    // use i+2 and i+3 to set initial velocities, default to 0\r\n  }\r\n  const agents = new Float32Array( __agents )\r\n\r\n  // makeBuffers accepts initial data, number of buffers, and buffer usage\r\n  // we'll make two buffers so we can complete the necessary swaps for\r\n  // transform feedback\r\n  return makeBuffers( agents, 2, gl.DYNAMIC_COPY )\r\n}\r\n\r\nfunction makeSimulationUniforms() {\r\n  // this input variable will be fed by feedback\r\n  const simulationPosition = gl.getAttribLocation( simulationProgram, 'agent_in' )\r\n  gl.enableVertexAttribArray( simulationPosition )\r\n  gl.vertexAttribPointer( simulationPosition, 4, gl.FLOAT, false, 0,0 )\r\n\r\n  // number of agents in our flock\r\n  const count  = gl.getUniformLocation( simulationProgram, 'agentCount' )\r\n  gl.uniform1f( count, agentCount )\r\n  \r\n  //Mouse position\r\n  uMouse = gl.getUniformLocation(simulationProgram, 'mouse')\r\n  gl.uniform2f(uMouse, 0, 0)\r\n\r\n  //Parameters\r\n  uCohesion = gl.getUniformLocation(simulationProgram, 'cohesionDist')\r\n  gl.uniform1f(uCohesion, PARAMS.cohesionDist)\r\n  uSeparation = gl.getUniformLocation(simulationProgram, 'separationDist')\r\n  gl.uniform1f(uSeparation, PARAMS.separationDist)\r\n  uAlign = gl.getUniformLocation(simulationProgram, 'alignDist')\r\n  gl.uniform1f(uAlign, PARAMS.alignDist)\r\n\r\n  uCohesionScale = gl.getUniformLocation(simulationProgram, 'cohesionScale')\r\n  gl.uniform1f(uCohesionScale, PARAMS.cohesionScale)\r\n  uSeparationScale = gl.getUniformLocation(simulationProgram, 'separationScale')\r\n  gl.uniform1f(uSeparationScale, PARAMS.separationScale)\r\n  uAlignScale = gl.getUniformLocation(simulationProgram, 'alignScale')\r\n  gl.uniform1f(uAlignScale, PARAMS.alignScale)\r\n\r\n  uCohesionAudio = gl.getUniformLocation(simulationProgram, 'cohesionAudio')\r\n  gl.uniform1f(uCohesionAudio, AUDIO.cohesionAudio)\r\n  uSeparationAudio = gl.getUniformLocation(simulationProgram, 'separationAudio')\r\n  gl.uniform1f(uSeparationAudio, AUDIO.separationAudio)\r\n  uAlignAudio = gl.getUniformLocation(simulationProgram, 'alignAudio')\r\n  gl.uniform1f(uAlignAudio, AUDIO.alignAudio)\r\n\r\n  uAudio = gl.getUniformLocation(simulationProgram, 'audio')\r\n  \r\n}\r\n\r\nfunction makeRenderPhase() {\r\n  renderProgram  = makeProgram( render_vert, render_frag, )\r\n  uTime = gl.getUniformLocation(renderProgram, 'time')\r\n  const renderPosition = gl.getAttribLocation( renderProgram, 'agent' )\r\n  gl.enableVertexAttribArray( renderPosition )\r\n  gl.vertexAttribPointer( renderPosition, 4, gl.FLOAT, false, 0,0 )\r\n\r\n  uAudioRender = gl.getUniformLocation(renderProgram, 'audio')\r\n\r\n  gl.useProgram( renderProgram )\r\n  //gl.enable(gl.BLEND)\r\n  //gl.blendFunc(gl.SRC_ALPHA,gl.ONE_MINUS_SRC_ALPHA)\r\n}\r\n\r\nfunction makeTextures() {\r\n  textures[0] = gl.createTexture()\r\n  gl.bindTexture( gl.TEXTURE_2D, textures[0] )\r\n  gl.getExtension('EXT_color_buffer_float');\r\n\r\n  gl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE )\r\n  gl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE )\r\n  gl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST )\r\n  gl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST )\r\n  // width = agentCount, height = 1\r\n  gl.texImage2D( gl.TEXTURE_2D, 0, gl.RGBA32F, agentCount, 1, 0, gl.RGBA, gl.FLOAT, null )\r\n\r\n  textures[1] = gl.createTexture()\r\n  gl.bindTexture( gl.TEXTURE_2D, textures[1] )\r\n  gl.getExtension('EXT_color_buffer_float');\r\n  gl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE )\r\n  gl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE )\r\n  gl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST )\r\n  gl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST )\r\n  gl.texImage2D( gl.TEXTURE_2D, 0, gl.RGBA32F, agentCount, 1, 0, gl.RGBA, gl.FLOAT, null )\r\n}\r\nlet time = 0;\r\nfunction render() {\r\n  var source = document.getElementById('audioSource')\r\n\r\n  time++;\r\n  window.requestAnimationFrame( render )\r\n\r\n  gl.useProgram( simulationProgram )\r\n\r\n  //Put in mouse uniform\r\n  gl.uniform2f(uMouse, mouseX, mouseY)\r\n\r\n  //Pass in parameter uniforms\r\n  gl.uniform1f(uCohesion, PARAMS.cohesionDist)\r\n  gl.uniform1f(uSeparation, PARAMS.separationDist)\r\n  gl.uniform1f(uAlign, PARAMS.alignDist)\r\n\r\n  gl.uniform1f(uCohesionScale, PARAMS.cohesionScale)\r\n  gl.uniform1f(uAlignScale, PARAMS.alignScale)\r\n  gl.uniform1f(uSeparationScale, PARAMS.separationScale)\r\n\r\n  //Put in audio uniform\r\n  if (ctxReady) {\r\n    var freqArray = new Uint8Array(analyser.fftSize);\r\n    analyser.getByteTimeDomainData(freqArray);\r\n    console.log(freqArray[0])\r\n    audioValue = parseFloat(freqArray[0] - 100.)\r\n    if(audioValue >= 0) {\r\n      gl.uniform1f(uAudio, audioValue)\r\n    }\r\n    else gl.uniform1f(uAudio, 0.)\r\n\r\n    gl.uniform1f(uCohesionAudio, AUDIO.cohesionAudio)\r\n    gl.uniform1f(uSeparationAudio, AUDIO.separationAudio)\r\n    gl.uniform1f(uAlignAudio, AUDIO.alignAudio)\r\n  }\r\n\r\n  gl.uniform1i(uDiffuse, PARAMS.diffuseBoids)\r\n\r\n\r\n  gl.bindFramebuffer( gl.FRAMEBUFFER, framebuffer )\r\n\r\n  // specify rendering to a width equal to the number of agents,\r\n  // but only one high for simplicity of lookup\r\n  gl.viewport( 0,0,agentCount, 1 )\r\n\r\n  // render to textures[1], swap at end of render()\r\n  gl.framebufferTexture2D( gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, textures[1], 0 )\r\n\r\n  // read from textures[0], swap at end of render()\r\n  gl.activeTexture( gl.TEXTURE0 )\r\n  gl.bindTexture(   gl.TEXTURE_2D, textures[0] )\r\n\r\n  // feedback transform\r\n  gl.bindBuffer( gl.ARRAY_BUFFER, buffers[0] )\r\n  gl.vertexAttribPointer( simulationPosition, 4, gl.FLOAT, false, 0,0 )\r\n  gl.bindBufferBase( gl.TRANSFORM_FEEDBACK_BUFFER, 0, buffers[1] )\r\n\r\n  gl.beginTransformFeedback( gl.POINTS )\r\n  // draw via POINTS\r\n  gl.drawArrays( gl.POINTS, 0, agentCount )\r\n  gl.endTransformFeedback()\r\n\r\n  gl.bindBufferBase( gl.TRANSFORM_FEEDBACK_BUFFER, 0, null )\r\n\r\n  gl.bindFramebuffer( gl.FRAMEBUFFER, null )\r\n\r\n  // important!!! last render was specified as only one pixel in height,\r\n  // that won't do for rendering our quad\r\n  gl.viewport( 0,0, gl.drawingBufferWidth, gl.drawingBufferHeight )\r\n\r\n  gl.useProgram( renderProgram )\r\n  gl.uniform1f(uTime, time);\r\n  gl.bindBuffer( gl.ARRAY_BUFFER, buffers[0] )\r\n  gl.drawArrays( gl.POINTS, 0, agentCount )\r\n\r\n  // swaps\r\n  let tmp = buffers[0];  buffers[0] = buffers[1];  buffers[1] = tmp;\r\n  tmp = textures[0]; textures[0] = textures[1]; textures[1] = tmp;\r\n}"],"names":["$e0ae3cb9b9bb4638$exports","$c2c87d9ea4c30c8f$exports","$a7e7cbef6c4ecca1$exports","$6a3721b94cf1af9b$exports","$efd3ba4ec2608b1d$var$gl","$efd3ba4ec2608b1d$var$transformFeedback","$efd3ba4ec2608b1d$var$framebuffer","$efd3ba4ec2608b1d$var$simulationProgram","$efd3ba4ec2608b1d$var$renderProgram","$efd3ba4ec2608b1d$var$buffers","$efd3ba4ec2608b1d$var$uMouse","$efd3ba4ec2608b1d$var$uTime","$efd3ba4ec2608b1d$var$uCohesion","$efd3ba4ec2608b1d$var$uSeparation","$efd3ba4ec2608b1d$var$uAlign","$efd3ba4ec2608b1d$var$uCohesionScale","$efd3ba4ec2608b1d$var$uSeparationScale","$efd3ba4ec2608b1d$var$uAlignScale","$efd3ba4ec2608b1d$var$uCohesionAudio","$efd3ba4ec2608b1d$var$uSeparationAudio","$efd3ba4ec2608b1d$var$uAlignAudio","$efd3ba4ec2608b1d$var$uAudio","$efd3ba4ec2608b1d$var$uAudioRender","$efd3ba4ec2608b1d$var$audioCtx","$efd3ba4ec2608b1d$var$analyser","$efd3ba4ec2608b1d$var$ctxReady","$efd3ba4ec2608b1d$var$mouseX","$efd3ba4ec2608b1d$var$mouseY","$efd3ba4ec2608b1d$var$textures","$efd3ba4ec2608b1d$var$PARAMS","cohesionDist","separationDist","alignDist","cohesionScale","separationScale","alignScale","$efd3ba4ec2608b1d$var$AUDIO","cohesionAudio","separationAudio","alignAudio","$efd3ba4ec2608b1d$var$makeProgram","vert","frag","transform","vertexShader","createShader","VERTEX_SHADER","shaderSource","compileShader","err","getShaderInfoLog","console","log","fragmentShader","FRAGMENT_SHADER","program","createProgram","attachShader","createTransformFeedback","bindTransformFeedback","TRANSFORM_FEEDBACK","transformFeedbackVaryings","SEPARATE_ATTRIBS","linkProgram","window","onload","canvas","document","getElementById","getContext","width","innerWidth","height","innerHeight","onmousemove","event","x","y","onkeydown","AudioContext","audioElement","player","createMediaElementSource","connect","destination","createAnalyser","fftSize","tab","Tweakpane","Pane","addTab","pages","title","addInput","min","max","shader","$parcel$interopDefault","useProgram","__agents","i","$efd3ba4ec2608b1d$var$agentCount","Math","random","array","count","usage","STATIC_DRAW","buffer","createBuffer","bindBuffer","ARRAY_BUFFER","bufferData","buffers","buff","byteLength","push","Array","isArray","$efd3ba4ec2608b1d$var$makeBuffers","Float32Array","DYNAMIC_COPY","$efd3ba4ec2608b1d$var$makeSimulationBuffer","simulationPosition","getAttribLocation","enableVertexAttribArray","vertexAttribPointer","FLOAT","getUniformLocation","uniform1f","uniform2f","$efd3ba4ec2608b1d$var$makeSimulationUniforms","$efd3ba4ec2608b1d$var$makeSimulationPhase","renderPosition","$efd3ba4ec2608b1d$var$makeRenderPhase","createTexture","bindTexture","TEXTURE_2D","getExtension","texParameteri","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","TEXTURE_MIN_FILTER","NEAREST","TEXTURE_MAG_FILTER","texImage2D","RGBA32F","RGBA","createFramebuffer","$efd3ba4ec2608b1d$var$render","$efd3ba4ec2608b1d$var$time","requestAnimationFrame","freqArray","Uint8Array","getByteTimeDomainData","audioValue","parseFloat","uniform1i","$efd3ba4ec2608b1d$var$uDiffuse","diffuseBoids","bindFramebuffer","FRAMEBUFFER","viewport","framebufferTexture2D","COLOR_ATTACHMENT0","activeTexture","TEXTURE0","$efd3ba4ec2608b1d$var$simulationPosition","bindBufferBase","TRANSFORM_FEEDBACK_BUFFER","beginTransformFeedback","POINTS","drawArrays","endTransformFeedback","drawingBufferWidth","drawingBufferHeight","tmp"],"version":3,"file":"index.7b3b25ce.js.map"}